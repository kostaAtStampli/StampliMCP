{
  "testCustomer": {
    "baseUrl": "http://63.32.187.185/StampliAcumaticaDB",
    "username": "admin",
    "password": "Password1",
    "subsidiary": "StampliCompany",
    "description": "Default Acumatica test environment with full dataset"
  },
  
  "credentialsSetupPattern": {
    "file": "finsys-drivers/acumatica/src/test/java/com/stampli/driver/AcumaticaDriverITest.java",
    "lines": "20-45",
    "purpose": "Copy this exact pattern for test credentials setup",
    "javaCode": "private static final String BASE_URL = \"http://63.32.187.185/StampliAcumaticaDB\";\nprivate static final String USERNAME = \"admin\";\nprivate static final String PASSWORD = \"Password1\";\nprivate static final String SUBSIDIARY = \"StampliCompany\";\n\nprivate AcumaticaDriver driver;\nprivate Map<String, String> connectionProperties;\n\n@Before\npublic void setUp() {\n    driver = new AcumaticaDriver();\n    connectionProperties = new HashMap<>();\n    connectionProperties.put(\"hostname\", BASE_URL);\n    connectionProperties.put(\"user\", USERNAME);\n    connectionProperties.put(\"password\", PASSWORD);\n}"
  },
  
  "goldenExamples": {
    "vendor_export": {
      "file": "finsys-drivers/acumatica/src/test/java/com/stampli/driver/AcumaticaDriverCreateVendorITest.java",
      "lines": "30-300",
      "keyTests": [
        {
          "method": "test_createVendorSuccessfully",
          "lines": "60-90",
          "purpose": "Basic vendor creation - copy this pattern"
        },
        {
          "method": "test_idempotencyReturnsExistingVendor",
          "lines": "140-165",
          "purpose": "Duplicate handling - vendor already exists with same link"
        },
        {
          "method": "test_exportWithDifferentLinkFails",
          "lines": "206-220",
          "purpose": "Link mismatch error - vendor exists with different link"
        },
        {
          "method": "test_missingStampliLinkReturnsError",
          "lines": "250-265",
          "purpose": "Validation error - required field missing"
        }
      ]
    },
    "vendor_import": {
      "file": "finsys-drivers/acumatica/src/test/java/com/stampli/driver/AcumaticaDriverITest.java",
      "lines": "28-60",
      "keyTests": [
        {
          "method": "testGetVendors",
          "lines": "28-60",
          "purpose": "Import pattern with pagination"
        }
      ]
    },
    "item_search": {
      "file": "finsys-drivers/acumatica/src/test/java/com/stampli/driver/AcumaticaDriverITest.java",
      "lines": "198-220",
      "keyTests": [
        {
          "method": "testGetItems",
          "lines": "198-220",
          "purpose": "Search pattern with filters"
        }
      ]
    }
  },
  
  "commonAssertions": {
    "success": "Assert.assertNull(\"Unexpected error: \" + response.getError(), response.getError());\nAssert.assertNotNull(response.getResponse());",
    "error": "Assert.assertNotNull(\"Expected error\", response.getError());",
    "notEmpty": "Assert.assertTrue(response.getResponse().size() > 0);"
  },

  "kotlinTestPatterns": {
    "testSetup": {
      "example": "class KotlinAcumaticaDriverTest {\n    private lateinit var driver: KotlinAcumaticaDriver\n    private lateinit var connectionProperties: Map<String, String>\n    \n    @BeforeEach\n    fun setUp() {\n        driver = KotlinAcumaticaDriver()\n        connectionProperties = mapOf(\n            \"hostname\" to \"http://63.32.187.185/StampliAcumaticaDB\",\n            \"user\" to \"admin\",\n            \"password\" to \"Password1\"\n        )\n    }",
      "requestBuilding": "val request = ExportVendorRequest().apply {\n    subsidiary = \"StampliCompany\"\n    dualDriverName = \"com.stampli.kotlin.driver.KotlinAcumaticaDriver\"\n    this.connectionProperties = connectionProperties\n    finSysBridgeTransferredObject = FinSysBridgeTransferredObject()\n}"
    },
    "assertions": {
      "success": "assertNull(response.error, \"Unexpected error: ${response.error}\")\nassertNotNull(response.response)",
      "error": "assertNotNull(response.error)\nassertTrue(response.error.contains(\"expected message\"))",
      "notEmpty": "assertTrue(response.response.size > 0)"
    },
    "dataSetup": {
      "uniqueIds": "Use timestamp suffix for test data: val vendorName = \"TestVendor_${System.currentTimeMillis()}\"",
      "cleanup": "Not required - test instance resets periodically"
    }
  },

  "connectionConfigUsage": {
    "description": "How to handle encrypted credentials",
    "location": "server-commons/src/main/java/com/stampli/server/data/ConnectionConfig.java",
    "decryption": "ConnectionConfig.decryptCredentials(credentials)",
    "encryption": "ConnectionConfig.getEncryptCredentials(credentials)",
    "fields": ["hostname", "user", "password", "subsidiary"],
    "kotlinUsage": "val decrypted = ConnectionConfig.decryptCredentials(request.connectionProperties)"
  },

  "testingStrategy": {
    "phase1": {
      "approach": "Test against live instance (63.32.187.185)",
      "focus": "Integration tests for core 6 methods"
    },
    "phase2": {
      "approach": "Add WireMock for hermetic testing",
      "focus": "Unit tests with mocked responses"
    },
    "cicd": {
      "approach": "Tests run against test instance in CI/CD",
      "coverage": "Aim for 80% code coverage"
    },
    "dataManagement": {
      "isolation": "Use unique identifiers with timestamp to avoid conflicts",
      "cleanup": "Test instance resets periodically - no manual cleanup needed"
    }
  }
}

